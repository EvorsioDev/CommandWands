plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'ru.evorsio'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven { url = 'https://jitpack.io' }
}

def configurateVersion = '4.1.2'
def lombokVersion = '1.18.26'
def lampVersion = '3.2.0'
dependencies {
    compileOnly "io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT"
    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation('com.google.inject:guice:7.0.0') {
        exclude group: 'com.google.guava'
    }
    implementation("net.kyori:adventure-text-minimessage:4.13.1") {
        exclude group: "net.kyori", module: "adventure-api"
    }
    implementation("org.spongepowered:configurate-yaml:${configurateVersion}") {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    implementation "org.spongepowered:configurate-core:${configurateVersion}"
    implementation "org.spongepowered:configurate-extra-guice:${configurateVersion}"

    implementation "com.github.Revxrsal.Lamp:common:${lampVersion}"
    implementation "com.github.Revxrsal.Lamp:bukkit:${lampVersion}"

    implementation('com.zaxxer:HikariCP:5.1.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation(project(":AdvCoLo")) {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: "org.spongepowered", module: 'configurate-core'
        exclude group: "org.spongepowered", module: 'configurate-yaml'
    }

    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
}

def targetJavaVersion = 17
java {
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-parameters']
    }
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test{
    useJUnitPlatform()
    testLogging({
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = "FULL"
    })
}

tasks {
    shadowJar {
        archiveClassifier = null

        def relocations = [
                'com.google',
                'com.zaxxer.hikari',
                'io.leangen.geantyref',
                'jakarta',
                'javax.annotation',
                'net.kyori.adventure.text.minimessage',
                'org.aopalliance',
                'org.checkerframework',
                'org.spongepowered',
                'revxrsal.commands'
        ]

        relocations.forEach {
            relocate(it, "ru.armagidon.shade.${it}")
        }

        exclude "*.properties"
    }

    build {
        dependsOn(shadowJar)
    }
}